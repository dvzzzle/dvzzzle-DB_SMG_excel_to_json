import pandas as pd
import json
import os
from datetime import datetime, time
from openpyxl import load_workbook

def validate_data_type(value, expected_type):
    if expected_type == 'text':
        return value if isinstance(value, str) else None
    elif expected_type == 'numeric':
        return value if isinstance(value, (int, float)) and not pd.isna(value) else None
    elif expected_type == 'ДД.ММ.ГГГГ':
        if isinstance(value, (datetime, pd.Timestamp)):
            return value.strftime('%d.%m.%Y')
        elif isinstance(value, str):
            try:
                datetime.strptime(value, '%d.%m.%Y')
                return value
            except ValueError:
                return None
        else:
            return None
    elif expected_type == 'int':
        return int(value) if isinstance(value, (int, float)) and not pd.isna(value) else None
    else:
        return value  # Если тип не указан, оставляем значение как есть
    
column_types = {
    "дата редактирования строки": "ДД.ММ.ГГГГ",
    "На какую дату актуализировано состояник ОКС": "ДД.ММ.ГГГГ",
    "Дата ввода": "ДД.ММ.ГГГГ",
    "План Начало": "ДД.ММ.ГГГГ", 
    "Факт Начало": "ДД.ММ.ГГГГ",
    "План Завершение": "ДД.ММ.ГГГГ",
    "Факт Завершение": "ДД.ММ.ГГГГ",
    "дата редактирования строки": "ДД.ММ.ГГГГ",
    "На какую дату актуализировано состояник ОКС": "ДД.ММ.ГГГГ",
    "На какую дату актуализировано состояние ОКС": "ДД.ММ.ГГГГ",
    "ППМ (708-ПП/ППТ) (факт)": "ДД.ММ.ГГГГ",
    "ГПЗУ (факт)": "ДД.ММ.ГГГГ",
    "Разработка и согласование ТЗ (факт)": "ДД.ММ.ГГГГ",
    "Разработка и согласование квартирографии (факт)": "ДД.ММ.ГГГГ",
    "Проведение конкрусных процедур и подписание договора (факт)": "ДД.ММ.ГГГГ",
    "Проведение конкурсных процедур и подписание договора (факт)": "ДД.ММ.ГГГГ",
    "Разработка и согласование АПР (факт)": "ДД.ММ.ГГГГ",
    "Разработка и согласование АГР (факт)": "ДД.ММ.ГГГГ",
    "Заключение СКП (факт)": "ДД.ММ.ГГГГ",
    "Договор ТП (факт)": "ДД.ММ.ГГГГ",
    "Получение заключения МГЭ (факт)": "ДД.ММ.ГГГГ",
    "Отселение домов в пятне застройки (факт)": "ДД.ММ.ГГГГ",
    "Вынос инженерных систем из пятна застройки (факт)": "ДД.ММ.ГГГГ",
    "Снос домов в пятне застройки (факт)": "ДД.ММ.ГГГГ",
    "Снос нежилых объектов в пятне застройки (факт)": "ДД.ММ.ГГГГ",
    "Получение разрешения на строительство (факт)": "ДД.ММ.ГГГГ",
    "Устройство подземной части (факт)": "ДД.ММ.ГГГГ",
    "Устройство надземной части (факт)": "ДД.ММ.ГГГГ",
    "Устройство инженерных систем (факт)": "ДД.ММ.ГГГГ",
    "Отделочные работы (факт)": "ДД.ММ.ГГГГ",
    "Благоустройство территории (факт)": "ДД.ММ.ГГГГ",
    "Корректировка ГПЗУ (факт, при наличии)": "ДД.ММ.ГГГГ",
    "Корректировка МГЭ (факт, при наличии)": "ДД.ММ.ГГГГ",
    "Корректировка РС (факт, при наличии)": "ДД.ММ.ГГГГ",
    "Корректировка СЗЗ (факт, при наличии)": "ДД.ММ.ГГГГ",
    "Получение ЗОС (факт)": "ДД.ММ.ГГГГ",
    "Получение РВ (факт)": "ДД.ММ.ГГГГ",
    "Постановка на кадастровый учет (факт)": "ДД.ММ.ГГГГ",
    "Передача под заселение (факт)": "ДД.ММ.ГГГГ",
    "СТРОИТЕЛЬНАЯ ГОТОВНОСТЬ (фактическая дата начала)": "ДД.ММ.ГГГГ",
    "СТРОИТЕЛЬНАЯ ГОТОВНОСТЬ (фактическая дата завершения)": "ДД.ММ.ГГГГ",
    "КОНСТРУКТИВ (фактическая дата начала)": "ДД.ММ.ГГГГ",
    "КОНСТРУКТИВ (фактическая дата завершения)": "ДД.ММ.ГГГГ",
    "КОЛ-ВО КОРПУСОВ (фактическая дата начала)": "ДД.ММ.ГГГГ",
    "КОЛ-ВО КОРПУСОВ (фактическая дата завершения)": "ДД.ММ.ГГГГ",
    "КОЛ-ВО ЭТАЖЕЙ (фактическая дата начала)": "ДД.ММ.ГГГГ",
    "КОЛ-ВО ЭТАЖЕЙ (фактическая дата завершения)": "ДД.ММ.ГГГГ",
    "СТЕНЫ И ПЕРЕГОРОДКИ (фактическая дата начала)": "ДД.ММ.ГГГГ",
    "СТЕНЫ И ПЕРЕГОРОДКИ (фактическая дата завершения)": "ДД.ММ.ГГГГ",
    "ФАСАД (фактическая дата начала)": "ДД.ММ.ГГГГ",
    "ФАСАД (фактическая дата завершения)": "ДД.ММ.ГГГГ",
    "УТЕПЛИТЕЛЬ (фактическая дата начала)": "ДД.ММ.ГГГГ",
    "УТЕПЛИТЕЛЬ (фактическая дата завершения)": "ДД.ММ.ГГГГ",
    "ФАСАДНАЯ СИСТЕМА (фактическая дата начала)": "ДД.ММ.ГГГГ",
    "ФАСАДНАЯ СИСТЕМА (фактическая дата завершения)": "ДД.ММ.ГГГГ",
    "ВНУТРЕННЯЯ ОТДЕЛКА (фактическая дата начала)": "ДД.ММ.ГГГГ",
    "ВНУТРЕННЯЯ ОТДЕЛКА (фактическая дата завершения)": "ДД.ММ.ГГГГ",
    "ЧЕРНОВАЯ ОТДЕЛКА (фактическая дата начала)": "ДД.ММ.ГГГГ",
    "ЧЕРНОВАЯ ОТДЕЛКА (фактическая дата завершения)": "ДД.ММ.ГГГГ",
    "ЧИСТОВАЯ ОТДЕЛКА (фактическая дата начала)": "ДД.ММ.ГГГГ",
    "ЧИСТОВАЯ ОТДЕЛКА (фактическая дата завершения)": "ДД.ММ.ГГГГ",
    "ВНУТРЕННИЕ СЕТИ (фактическая дата начала)": "ДД.ММ.ГГГГ",
    "ВНУТРЕННИЕ СЕТИ (фактическая дата завершения)": "ДД.ММ.ГГГГ",
    "ВОДОСНАБЖЕНИЕ И ОТОПЛЕНИЕ (ВЕРТИКАЛЬ) (фактическая дата начала)": "ДД.ММ.ГГГГ",
    "ВОДОСНАБЖЕНИЕ И ОТОПЛЕНИЕ (ВЕРТИКАЛЬ) (фактическая дата завершения)": "ДД.ММ.ГГГГ",
    "ВОДОСНАБЖЕНИЕ И ОТОПЛЕНИЕ ПОЭТАЖНО (ГОРИЗОНТ) (фактическая дата начала)": "ДД.ММ.ГГГГ",
    "ВОДОСНАБЖЕНИЕ И ОТОПЛЕНИЕ ПОЭТАЖНО (ГОРИЗОНТ) (фактическая дата завершения)": "ДД.ММ.ГГГГ",
    "ВЕНТИЛЯЦИЯ (фактическая дата начала)": "ДД.ММ.ГГГГ",
    "ВЕНТИЛЯЦИЯ (фактическая дата завершения)": "ДД.ММ.ГГГГ",
    "ЭЛЕКТРОСНАБЖЕНИЕ И СКС (фактическая дата начала)": "ДД.ММ.ГГГГ",
    "ЭЛЕКТРОСНАБЖЕНИЕ И СКС (фактическая дата завершения)": "ДД.ММ.ГГГГ",
    "НАРУЖНЫЕ СЕТИ (фактическая дата начала)": "ДД.ММ.ГГГГ",
    "НАРУЖНЫЕ СЕТИ (фактическая дата завершения)": "ДД.ММ.ГГГГ",
    "БЛАГОУСТРОЙСТВО (фактическая дата начала)": "ДД.ММ.ГГГГ",
    "БЛАГОУСТРОЙСТВО (фактическая дата завершения)": "ДД.ММ.ГГГГ",
    "ТВЕРДОЕ ПОКРЫТИЕ (фактическая дата начала)": "ДД.ММ.ГГГГ",
    "ТВЕРДОЕ ПОКРЫТИЕ (фактическая дата завершения)": "ДД.ММ.ГГГГ",
    "ОЗЕЛЕНЕНИЕ (фактическая дата начала)": "ДД.ММ.ГГГГ",
    "ОЗЕЛЕНЕНИЕ (фактическая дата завершения)": "ДД.ММ.ГГГГ",
    "МАФ (фактическая дата начала)": "ДД.ММ.ГГГГ",
    "МАФ (фактическая дата завершения)": "ДД.ММ.ГГГГ",
    "Срок устранения (план)": "ДД.ММ.ГГГГ",
    "Срок устранения (факт)": "ДД.ММ.ГГГГ",
    "дата редактирования строки": "ДД.ММ.ГГГГ",
    "Плановый ввод по директивному графику": "ДД.ММ.ГГГГ",
    "Дата совещания - изменение даты ввода по директивному графику": "ДД.ММ.ГГГГ",
    "Плановый ввод по договору": "ДД.ММ.ГГГГ",
    "Прогнозируемый срок ввода": "ДД.ММ.ГГГГ",
    "СТРОИТЕЛЬНАЯ ГОТОВНОСТЬ (плановая дата начала)": "ДД.ММ.ГГГГ",
    "СТРОИТЕЛЬНАЯ ГОТОВНОСТЬ (плановая дата завершения)": "ДД.ММ.ГГГГ",
    "КОНСТРУКТИВ (плановая дата начала)": "ДД.ММ.ГГГГ",
    "КОНСТРУКТИВ (плановая дата завершения)": "ДД.ММ.ГГГГ",
    "КОЛ-ВО КОРПУСОВ (плановая дата начала)": "ДД.ММ.ГГГГ",
    "КОЛ-ВО КОРПУСОВ (плановая дата завершения)": "ДД.ММ.ГГГГ",
    "КОЛ-ВО ЭТАЖЕЙ (плановая дата начала)": "ДД.ММ.ГГГГ",
    "КОЛ-ВО ЭТАЖЕЙ (плановая дата завершения)": "ДД.ММ.ГГГГ",
    "СТЕНЫ И ПЕРЕГОРОДКИ (плановая дата начала)": "ДД.ММ.ГГГГ",
    "СТЕНЫ И ПЕРЕГОРОДКИ (плановая дата завершения)": "ДД.ММ.ГГГГ",
    "ФАСАД (плановая дата начала)": "ДД.ММ.ГГГГ",
    "ФАСАД (плановая дата завершения)": "ДД.ММ.ГГГГ",
    "УТЕПЛИТЕЛЬ (плановая дата начала)": "ДД.ММ.ГГГГ",
    "УТЕПЛИТЕЛЬ (плановая дата завершения)": "ДД.ММ.ГГГГ",
    "ФАСАДНАЯ СИСТЕМА (плановая дата начала)": "ДД.ММ.ГГГГ",
    "ФАСАДНАЯ СИСТЕМА (плановая дата завершения)": "ДД.ММ.ГГГГ",
    "ВНУТРЕННЯЯ ОТДЕЛКА (плановая дата начала)": "ДД.ММ.ГГГГ",
    "ВНУТРЕННЯЯ ОТДЕЛКА (плановая дата завершения)": "ДД.ММ.ГГГГ",
    "ЧЕРНОВАЯ ОТДЕЛКА (плановая дата начала)": "ДД.ММ.ГГГГ",
    "ЧЕРНОВАЯ ОТДЕЛКА (плановая дата завершения)": "ДД.ММ.ГГГГ",
    "ЧИСТОВАЯ ОТДЕЛКА (плановая дата начала)": "ДД.ММ.ГГГГ",
    "ЧИСТОВАЯ ОТДЕЛКА (плановая дата завершения)": "ДД.ММ.ГГГГ",
    "ВНУТРЕННИЕ СЕТИ (плановая дата начала)": "ДД.ММ.ГГГГ",
    "ВНУТРЕННИЕ СЕТИ (плановая дата завершения)": "ДД.ММ.ГГГГ",
    "ВОДОСНАБЖЕНИЕ И ОТОПЛЕНИЕ (ВЕРТИКАЛЬ) (плановая дата начала)": "ДД.ММ.ГГГГ",
    "ВОДОСНАБЖЕНИЕ И ОТОПЛЕНИЕ (ВЕРТИКАЛЬ) (плановая дата завершения)": "ДД.ММ.ГГГГ",
    "ВОДОСНАБЖЕНИЕ И ОТОПЛЕНИЕ ПОЭТАЖНО (ГОРИЗОНТ) (плановая дата начала)": "ДД.ММ.ГГГГ",
    "ВОДОСНАБЖЕНИЕ И ОТОПЛЕНИЕ ПОЭТАЖНО (ГОРИЗОНТ) (плановая дата завершения)": "ДД.ММ.ГГГГ",
    "ВЕНТИЛЯЦИЯ (плановая дата начала)": "ДД.ММ.ГГГГ",
    "ВЕНТИЛЯЦИЯ (плановая дата завершения)": "ДД.ММ.ГГГГ",
    "ЭЛЕКТРОСНАБЖЕНИЕ И СКС (плановая дата начала)": "ДД.ММ.ГГГГ",
    "ЭЛЕКТРОСНАБЖЕНИЕ И СКС (плановая дата завершения)": "ДД.ММ.ГГГГ",
    "НАРУЖНЫЕ СЕТИ (плановая дата начала)": "ДД.ММ.ГГГГ",
    "НАРУЖНЫЕ СЕТИ (плановая дата завершения)": "ДД.ММ.ГГГГ",
    "БЛАГОУСТРОЙСТВО (плановая дата начала)": "ДД.ММ.ГГГГ",
    "БЛАГОУСТРОЙСТВО (плановая дата завершения)": "ДД.ММ.ГГГГ",
    "ТВЕРДОЕ ПОКРЫТИЕ (плановая дата начала)": "ДД.ММ.ГГГГ",
    "ТВЕРДОЕ ПОКРЫТИЕ (плановая дата завершения)": "ДД.ММ.ГГГГ",
    "ОЗЕЛЕНЕНИЕ (плановая дата начала)": "ДД.ММ.ГГГГ",
    "ОЗЕЛЕНЕНИЕ (плановая дата завершения)": "ДД.ММ.ГГГГ",
    "МАФ (плановая дата начала)": "ДД.ММ.ГГГГ",
    "МАФ (плановая дата завершения)": "ДД.ММ.ГГГГ"
}

def convert_excel_to_json(excel_file_path):
    # Чтение Excel-файла
    xls = pd.ExcelFile(excel_file_path)

    # Получение директории исходного файла
    directory = os.path.dirname(excel_file_path)

    # Проверка наличия папки ДСТИИ и создание, если она не существует
    file_directory = os.path.join(directory, 'ДГП')
    if not os.path.exists(file_directory):
        os.makedirs(file_directory)

    # Список листов, которые нужно обработать
    sheets_to_process = [
        "1 - СМГ ежедневный",
        "2.1 - СМГ срывы и действия",
        "2.2 - СМГ культура произв-ва",
        "3 - ОИВ ресурсы план (мес.)",
        "4 - ОИВ план",
        "5 - ОИВ факт",
        "6 - ОИВ КТ"
    ]

    # Обработка каждого листа
    for sheet_name in sheets_to_process:
        if sheet_name in xls.sheet_names:
            if sheet_name == "6 - ОИВ КТ":
                # Open the workbook in read-write mode
                wb = load_workbook(filename=xls, data_only=True)
                ws = wb[sheet_name]
                   
                # Создаем список для хранения заголовков с учетом объединенных ячеек
                headers = [[None for _ in range(ws.max_column)] for _ in range(3)]
                # Now you can access merged cell ranges
                for merge in ws.merged_cells.ranges:
                    min_row, min_col, max_row, max_col = merge.min_row, merge.min_col, merge.max_row, merge.max_col
                    value = ws.cell(row=min_row, column=min_col).value

                    # Fill all cells in the merged range with the value
                    for row in range(min_row, max_row + 1):
                        for col in range(min_col, max_col + 1):
                            if row <= 3:  # We are only processing the first three rows (headers)
                                headers[row - 1][col - 1] = value

                # Заполняем оставшиеся ячейки (не объединенные)
                for row in range(1, 4):  # Первые три строки
                    for col in range(1, ws.max_column + 1):
                        if headers[row - 1][col - 1] is None:  # Если ячейка не была заполнена объединением
                            headers[row - 1][col - 1] = ws.cell(row=row, column=col).value

                # Чтение данных с помощью pandas
                df = pd.read_excel(xls, sheet_name=sheet_name, header=None)
                data_rows = df.iloc[4:].values.tolist()

                # Находим индекс колонки "УИН" по названию
                uin_col_idx = None
                for col_idx, header in enumerate(headers[2]):  # Ищем в первой строке заголовков
                    if header and header.strip().lower() == 'уин':  # Игнорируем пробелы и регистр
                        uin_col_idx = col_idx
                        break

                # Если колонка "УИН" найдена, удаляем строки с пустыми ячейками, нулями или значением "не требуется"
                if uin_col_idx is not None:
                    data_rows = [
                        row for row in data_rows
                        if row[uin_col_idx] not in (None, "", 0)
                    ]

                # Удаление колонок, содержащих слово "комментарий" в любом регистре
                columns_to_drop = [
                    col_idx for col_idx in range(len(headers[0]))
                    if (headers[0][col_idx] is not None and 'комментарий||титул||год титула' in headers[0][col_idx].lower()) or
                    (headers[1][col_idx] is not None and 'комментарий||титул||год титула' in headers[1][col_idx].lower()) or
                    (headers[2][col_idx] is not None and 'комментарий||титул||год титула' in headers[2][col_idx].lower())
                ]

                headers = [
                    [header for col_idx, header in enumerate(row) if col_idx not in columns_to_drop]
                    for row in headers
                ]
                data_rows = [
                    [value for col_idx, value in enumerate(row) if col_idx not in columns_to_drop]
                    for row in data_rows
                ]

                # Создание структуры JSON
                data_dict = []
                for row in data_rows:
                    record = {}
                    for col_idx in range(len(row)):
                        # Получение уровней вложенности
                        level1 = headers[0][col_idx].replace('\n', ' ') if headers[0][col_idx] else None
                        level2 = headers[1][col_idx].replace('\n', ' ') if headers[1][col_idx] else None
                        level3 = headers[2][col_idx].replace('\n', ' ') if headers[2][col_idx] else None

                        # Инициализация current_level
                        current_level = record  # По умолчанию current_level указывает на record

                        # Если level1 пустой или отсутствует в данных, то level2 записывается без вложенности
                        if not level1 or level1 not in headers[0]:
                            if level2:
                                level2 = f"КОНТРТОЧКА {level2}"  # Добавляем "КОНТРТОЧКА" к level2
                                if level2 not in record:
                                    record[level2] = {}
                                current_level = record[level2]
                        else:
                            # Если level1 не пустой, создаем первый уровень вложенности
                            level1 = f"ОБЩКОНТРТОЧКА {level1}"
                            if level1 not in record:
                                record[level1] = {}
                            current_level = record[level1]

                            # Если level2 не пустой, создаем второй уровень вложенности
                            if level2:
                                level2 = f"КОНТРТОЧКА {level2}"  # Добавляем "КОНТРТОЧКА" к level2
                                if level2 not in current_level:
                                    current_level[level2] = {}
                                current_level = current_level[level2]

                        # Добавляем значение level3, если оно есть
                        if level3:
                            value = row[col_idx]
                            if isinstance(value, (datetime, pd.Timestamp)):
                                value = value.strftime('%d.%m.%Y')
                            elif isinstance(value, time):
                                value = value.strftime('%H:%M:%S')
                            elif pd.isna(value) or value == '':
                                value = None

                            # Валидация значения по типу из column_types
                            if level3 in column_types:
                                value = validate_data_type(value, column_types[level3])

                            # Если значение level3 равно "не требуется", удаляем level2 и level3
                            if isinstance(value, str) and value.strip().lower() == "не требуется":
                                if level1 in record and level2 in record[level1]:
                                    del record[level1][level2]  # Удаляем level2
                                continue  # Пропускаем добавление level3

                            # Добавляем значение в current_level
                            current_level[level3] = value

                    # Постобработка: удаляем level2, если все его level3 равны null
                    for level1_key in list(record.keys()):  # Используем list для безопасного удаления
                        if isinstance(record[level1_key], dict):  # Проверяем, что level1_key ведет на словарь
                            for level2_key in list(record[level1_key].keys()):  # Безопасное удаление
                                if isinstance(record[level1_key][level2_key], dict):  # Проверяем, что level2_key ведет на словарь
                                    # Проверяем, все ли level3 равны null
                                    if all(value is None for value in record[level1_key][level2_key].values()):
                                        del record[level1_key][level2_key]  # Удаляем level2, если все level3 равны null        

                    # Постобработка: удаляем level1, если все его level2 равны null
                    for level1_key in list(record.keys()):  # Используем list для безопасного удаления
                        if isinstance(record[level1_key], dict):  # Проверяем, что level1_key ведет на словарь
                            if all(value is None for value in record[level1_key].values()):
                                del record[level1_key]  # Удаляем level1, если все его level2 равны null

                    
                    # Удаление ключей "Титул" и "Год титула" из записи
                    if "Титул" in record:
                        del record["Титул"]
                    if "Год титула" in record:
                        del record["Год титула"]

                    data_dict.append(record)

                # Формирование пути для JSON-файла
                json_file_path = os.path.join(file_directory, f'{sheet_name}.json')

                # Запись данных в JSON-файл
                with open(json_file_path, 'w', encoding='utf-8') as json_file:
                    json.dump(data_dict, json_file, ensure_ascii=False, indent=4)

                print(f'Лист "{sheet_name}" успешно конвертирован в файл "{json_file_path}".')
            else:
                if sheet_name == "2.1 - СМГ срывы и действия" or sheet_name == "2.2 - СМГ культура произв-ва" or sheet_name == "3 - ОИВ ресурсы план (мес.)":
                    df = pd.read_excel(xls, sheet_name=sheet_name, header=0, skiprows=[1])
                else:
                    # Обработка остальных листов
                    df = pd.read_excel(xls, sheet_name=sheet_name, header=1, skiprows=[2])

                # Обработка листа "4 - ОИВ план"
                if sheet_name == "4 - ОИВ план":
                    # Проверка наличия нужных колонок
                    if 'Плановый ввод по директивному графику' in df.columns and 'Плановый ввод по договору' in df.columns:
                        # Заполнение пустых значений в колонке "Плановый ввод по директивному графику"
                        df['Плановый ввод по директивному графику'] = df.apply(
                            lambda row: row['Плановый ввод по договору'] if pd.isna(row['Плановый ввод по директивному графику']) else row['Плановый ввод по директивному графику'],
                            axis=1
                        )

                # Удаление колонок с комментариями, титулами и годами титулов
                df = df.loc[:, ~df.columns.str.contains('комментарий|титул|год титула', case=False)]

                # Удаление указанных колонок для листа "1 - СМГ ежедневный"
                if sheet_name == "1 - СМГ ежедневный":
                    columns_to_drop = [
                        "ОЦЕНКА СТРОИТЕЛЬНОГО ГОРОДКА",
                        "ПАСПОРТ ОБЪЕКТА (наличие)",
                        "ПАСПОРТ ОБЪЕКТА (оценка)",
                        "ПЕРИМЕТРАЛЬНОЕ ОГРАЖДЕНИЕ (наличие)",
                        "ПЕРИМЕТРАЛЬНОЕ ОГРАЖДЕНИЕ (оценка)",
                        "СИГНАЛЬНОЕ ОГРАЖДЕНИЕ \"ГИРЛЯНДА\" (наличие)",
                        "СИГНАЛЬНОЕ ОГРАЖДЕНИЕ \"ГИРЛЯНДА\" (оценка)",
                        "ПОСТ ОХРАНЫ (наличие)",
                        "ПОСТ ОХРАНЫ (оценка)",
                        "ПУНКТ МОЙКИ КОЛЕС (наличие)",
                        "ПУНКТ МОЙКИ КОЛЕС (оценка)",
                        "ПОКРЫТИЕ СТРОИТЕЛЬНОГО ГОРОДКА (наличие)",
                        "ПОКРЫТИЕ СТРОИТЕЛЬНОГО ГОРОДКА (оценка)",
                        "ПОДЪЕЗДНЫХ ПУТЕЙ (наличие)",
                        "ПОДЪЕЗДНЫХ ПУТЕЙ (оценка)",
                        "НАЛИЧИЕ И СОСТОЯНИЕ  САНИТАРНО-БЫТОВЫХ, ПРОИЗВОДСТВЕННЫХ И АДМИНИСТРАТИВНЫХ ПОМЕЩЕНИЙ И СООРУЖЕНИЙ (наличие)",
                        "НАЛИЧИЕ И СОСТОЯНИЕ  САНИТАРНО-БЫТОВЫХ, ПРОИЗВОДСТВЕННЫХ И АДМИНИСТРАТИВНЫХ ПОМЕЩЕНИЙ И СООРУЖЕНИЙ (оценка)",
                        "ЧИСТОТА И ПОРЯДОК НА ТЕРРИТОРИИ СТРОИТЕЛЬНОГО ГОРОДКА \n(наличие)",
                        "ЧИСТОТА И ПОРЯДОК НА ТЕРРИТОРИИ СТРОИТЕЛЬНОГО ГОРОДКА\n (оценка)"
                    ]
                    # Удаляем лишние пробелы в названиях колонок
                    df.columns = df.columns.str.strip()
                    
                    # Удаляем только те колонки, которые существуют в DataFrame
                    columns_to_drop = [col.strip() for col in columns_to_drop if col.strip() in df.columns]
                    df.drop(columns=columns_to_drop, inplace=True)

                # Проверяем, есть ли колонка "УИН" в DataFrame
                if 'УИН' in df.columns:
                    # Удаляем строки, где значение в колонке "УИН" пустое или равно "0"
                    df = df[(df['УИН'].notna()) & (df['УИН'] != "0") & (df['УИН'] != 0)]
                else:
                    print(f'Колонка "УИН" отсутствует в листе "{sheet_name}".')

                # Удаление указанных колонок в листах "1 - СМГ ежедневный", "4 - ОИВ план" и "5 - ОИВ факт"
                if sheet_name in ["1 - СМГ ежедневный", "4 - ОИВ план", "5 - ОИВ факт"]:
                    columns_to_drop = ["АИП (да/нет)", "Дата включения в АИП", "Сумма по АИП, млрд руб", "Аванс, млрд руб"]
                    df.drop(columns=[col for col in columns_to_drop if col in df.columns], inplace=True)
                
                # Обработка листа "5 - ОИВ факт"
                if sheet_name == "5 - ОИВ факт":
                    # Список колонок, которые нужно переименовать
                    columns_to_rename = {
                        "Получение ГПЗУ (факт)": "ЭТАПРЕАЛИЗАЦИИ Получение ГПЗУ (факт)",
                        "Получение ТУ от ресурсоснабжающих организаций (факт)": "ЭТАПРЕАЛИЗАЦИИ Получение ТУ от РСО (факт)",
                        "Разработка и согласование АГР (факт)": "ЭТАПРЕАЛИЗАЦИИ Разработка и согласование АГР (факт)",
                        "Разработка и получение положительного заключения экспертизы ПСД (факт)": "ЭТАПРЕАЛИЗАЦИИ Разработка экспертиза ПСД (факт)",
                        "Получение РНС (факт)": "ЭТАПРЕАЛИЗАЦИИ Получение РНС (факт)",
                        "Начато производство СМР": "ЭТАПРЕАЛИЗАЦИИ Производство СМР (факт)",
                        "Технологическое присоединение (факт)": "ЭТАПРЕАЛИЗАЦИИ Технологическое присоединение (факт)",
                        "Получение ЗОС (факт)": "ЭТАПРЕАЛИЗАЦИИ Получение ЗОС (факт)",
                        "Получение РВ (факт)": "ЭТАПРЕАЛИЗАЦИИ Получение РВ (факт)"
                    }
                    
                    # Переименование колонок
                    df.rename(columns=columns_to_rename, inplace=True)
                
                # Обработка листа "4 - ОИВ план"
                if sheet_name == "4 - ОИВ план":
                    # Список колонок, которые нужно переименовать
                    columns_to_rename = {
                        "Получение ГПЗУ план": "ЭТАПРЕАЛИЗАЦИИ Получение ГПЗУ (план)",
                        "Получение ТУ от ресурсоснабжающих организаций (план)": "ЭТАПРЕАЛИЗАЦИИ Получение ТУ от РСО (план)",
                        "Разработка и согласование АГР (план)": "ЭТАПРЕАЛИЗАЦИИ Разработка и согласование АГР (план)",
                        "Разработка и получение положительного заключения экспертизы ПСД (план)": "ЭТАПРЕАЛИЗАЦИИ Разработка экспертиза ПСД (план)",
                        "Получение РНС (план)": "ЭТАПРЕАЛИЗАЦИИ Получение РНС (план)",
                        "Производство СМР (план)": "ЭТАПРЕАЛИЗАЦИИ Производство СМР (план)",
                        "Технологическое присоединение (план)": "ЭТАПРЕАЛИЗАЦИИ Технологическое присоединение (план)",
                        "Получение ЗОС (план)": "ЭТАПРЕАЛИЗАЦИИ Получение ЗОС (план)",
                        "Получение РВ (план)": "ЭТАПРЕАЛИЗАЦИИ Получение РВ (план)"
                    }
                    
                    # Переименование колонок
                    df.rename(columns=columns_to_rename, inplace=True)


                # Конвертация DataFrame в словарь
                data_dict = df.to_dict(orient='records')

                # Список названий ключей, к которым нужно добавить "СТРЭТАП"
                keys_to_modify = [
                    "СТРОИТЕЛЬНАЯ ГОТОВНОСТЬ (фактическая дата начала)",
                    "СТРОИТЕЛЬНАЯ ГОТОВНОСТЬ (фактическая дата завершения)",
                    "СТРОИТЕЛЬНАЯ ГОТОВНОСТЬ (% выполнения, план)",
                    "СТРОИТЕЛЬНАЯ ГОТОВНОСТЬ (% выполнения, факт)",
                    "КОНСТРУКТИВ (фактическая дата начала)",
                    "КОНСТРУКТИВ (фактическая дата завершения)",
                    "КОНСТРУКТИВ (% выполнения, план)",
                    "КОНСТРУКТИВ (% выполнения, факт)",
                    "КОЛ-ВО КОРПУСОВ (фактическая дата начала)",
                    "КОЛ-ВО КОРПУСОВ (фактическая дата завершения)",
                    "КОЛ-ВО КОРПУСОВ (% выполнения, план)",
                    "КОЛ-ВО КОРПУСОВ (% выполнения, факт)",
                    "КОЛ-ВО ЭТАЖЕЙ (фактическая дата начала)",
                    "КОЛ-ВО ЭТАЖЕЙ (фактическая дата завершения)",
                    "КОЛ-ВО ЭТАЖЕЙ (% выполнения, план)",
                    "КОЛ-ВО ЭТАЖЕЙ (% выполнения, факт)",
                    "СТЕНЫ И ПЕРЕГОРОДКИ (фактическая дата начала)",
                    "СТЕНЫ И ПЕРЕГОРОДКИ (фактическая дата завершения)",
                    "СТЕНЫ И ПЕРЕГОРОДКИ (% выполнения, план)",
                    "СТЕНЫ И ПЕРЕГОРОДКИ (% выполнения, факт)",
                    "ФАСАД (фактическая дата начала)",
                    "ФАСАД (фактическая дата завершения)",
                    "ФАСАД (% выполнения, план)",
                    "ФАСАД (% выполнения, факт)",
                    "УТЕПЛИТЕЛЬ (фактическая дата начала)",
                    "УТЕПЛИТЕЛЬ (фактическая дата завершения)",
                    "УТЕПЛИТЕЛЬ (% выполнения, план)",
                    "УТЕПЛИТЕЛЬ (% выполнения, факт)",
                    "ФАСАДНАЯ СИСТЕМА (фактическая дата начала)",
                    "ФАСАДНАЯ СИСТЕМА (фактическая дата завершения)",
                    "ФАСАДНАЯ СИСТЕМА (% выполнения, план)",
                    "ФАСАДНАЯ СИСТЕМА (% выполнения, факт)",
                    "ВНУТРЕННЯЯ ОТДЕЛКА (фактическая дата начала)",
                    "ВНУТРЕННЯЯ ОТДЕЛКА (фактическая дата завершения)",
                    "ВНУТРЕННЯЯ ОТДЕЛКА (% выполнения, план)",
                    "ВНУТРЕННЯЯ ОТДЕЛКА (% выполнения, факт)",
                    "ЧЕРНОВАЯ ОТДЕЛКА (фактическая дата начала)",
                    "ЧЕРНОВАЯ ОТДЕЛКА (фактическая дата завершения)",
                    "ЧЕРНОВАЯ ОТДЕЛКА (% выполнения, план)",
                    "ЧЕРНОВАЯ ОТДЕЛКА (% выполнения, факт)",
                    "ЧИСТОВАЯ ОТДЕЛКА (фактическая дата начала)",
                    "ЧИСТОВАЯ ОТДЕЛКА (фактическая дата завершения)",
                    "ЧИСТОВАЯ ОТДЕЛКА (% выполнения, план)",
                    "ЧИСТОВАЯ ОТДЕЛКА (% выполнения, факт)",
                    "ВНУТРЕННИЕ СЕТИ (фактическая дата начала)",
                    "ВНУТРЕННИЕ СЕТИ (фактическая дата завершения)",
                    "ВНУТРЕННИЕ СЕТИ (% выполнения, план)",
                    "ВНУТРЕННИЕ СЕТИ (% выполнения, факт)",
                    "ВОДОСНАБЖЕНИЕ И ОТОПЛЕНИЕ (ВЕРТИКАЛЬ) (фактическая дата начала)",
                    "ВОДОСНАБЖЕНИЕ И ОТОПЛЕНИЕ (ВЕРТИКАЛЬ) (фактическая дата завершения)",
                    "ВОДОСНАБЖЕНИЕ И ОТОПЛЕНИЕ (ВЕРТИКАЛЬ) (% выполнения, план)",
                    "ВОДОСНАБЖЕНИЕ И ОТОПЛЕНИЕ (ВЕРТИКАЛЬ) (% выполнения, факт)",
                    "ВОДОСНАБЖЕНИЕ И ОТОПЛЕНИЕ ПОЭТАЖНО (ГОРИЗОНТ) (фактическая дата начала)",
                    "ВОДОСНАБЖЕНИЕ И ОТОПЛЕНИЕ ПОЭТАЖНО (ГОРИЗОНТ) (фактическая дата завершения)",
                    "ВОДОСНАБЖЕНИЕ И ОТОПЛЕНИЕ ПОЭТАЖНО (ГОРИЗОНТ) (% выполнения, план)",
                    "ВОДОСНАБЖЕНИЕ И ОТОПЛЕНИЕ ПОЭТАЖНО (ГОРИЗОНТ) (% выполнения, факт)",
                    "ВЕНТИЛЯЦИЯ (фактическая дата начала)",
                    "ВЕНТИЛЯЦИЯ (фактическая дата завершения)",
                    "ВЕНТИЛЯЦИЯ (% выполнения, план)",
                    "ВЕНТИЛЯЦИЯ (% выполнения, факт)",
                    "ЭЛЕКТРОСНАБЖЕНИЕ И СКС (фактическая дата начала)",
                    "ЭЛЕКТРОСНАБЖЕНИЕ И СКС (фактическая дата завершения)",
                    "ЭЛЕКТРОСНАБЖЕНИЕ И СКС (% выполнения, план)",
                    "ЭЛЕКТРОСНАБЖЕНИЕ И СКС (% выполнения, факт)",
                    "НАРУЖНЫЕ СЕТИ (фактическая дата начала)",
                    "НАРУЖНЫЕ СЕТИ (фактическая дата завершения)",
                    "НАРУЖНЫЕ СЕТИ (% выполнения, план)",
                    "НАРУЖНЫЕ СЕТИ (% выполнения, факт)",
                    "БЛАГОУСТРОЙСТВО (фактическая дата начала)",
                    "БЛАГОУСТРОЙСТВО (фактическая дата завершения)",
                    "БЛАГОУСТРОЙСТВО (% выполнения, план)",
                    "БЛАГОУСТРОЙСТВО (% выполнения, факт)",
                    "ТВЕРДОЕ ПОКРЫТИЕ (фактическая дата начала)",
                    "ТВЕРДОЕ ПОКРЫТИЕ (фактическая дата завершения)",
                    "ТВЕРДОЕ ПОКРЫТИЕ (% выполнения, план)",
                    "ТВЕРДОЕ ПОКРЫТИЕ (% выполнения, факт)",
                    "ОЗЕЛЕНЕНИЕ (фактическая дата начала)",
                    "ОЗЕЛЕНЕНИЕ (фактическая дата завершения)",
                    "ОЗЕЛЕНЕНИЕ (% выполнения, план)",
                    "ОЗЕЛЕНЕНИЕ (% выполнения, факт)",
                    "МАФ (фактическая дата начала)",
                    "МАФ (фактическая дата завершения)",
                    "МАФ (% выполнения, план)",
                    "МАФ (% выполнения, факт)",
                    "ОЦЕНКА СТРОИТЕЛЬНОГО ГОРОДКА",
                    "ПАСПОРТ ОБЪЕКТА (наличие)",
                    "ПАСПОРТ ОБЪЕКТА (оценка)",
                    "ПЕРИМЕТРАЛЬНОЕ ОГРАЖДЕНИЕ (наличие)",
                    "ПЕРИМЕТРАЛЬНОЕ ОГРАЖДЕНИЕ (оценка)",
                    "СИГНАЛЬНОЕ ОГРАЖДЕНИЕ \"ГИРЛЯНДА\" (наличие)",
                    "СИГНАЛЬНОЕ ОГРАЖДЕНИЕ \"ГИРЛЯНДА\" (оценка)",
                    "ПОСТ ОХРАНЫ (наличие)",
                    "ПОСТ ОХРАНЫ (оценка)",
                    "ПУНКТ МОЙКИ КОЛЕС (наличие)",
                    "ПУНКТ МОЙКИ КОЛЕС (оценка)",
                    "ПОКРЫТИЕ СТРОИТЕЛЬНОГО ГОРОДКА (наличие)",
                    "ПОКРЫТИЕ СТРОИТЕЛЬНОГО ГОРОДКА (оценка)",
                    "ПОДЪЕЗДНЫХ ПУТЕЙ (наличие)",
                    "ПОДЪЕЗДНЫХ ПУТЕЙ (оценка)",
                    "НАЛИЧИЕ И СОСТОЯНИЕ  САНИТАРНО-БЫТОВЫХ, ПРОИЗВОДСТВЕННЫХ И АДМИНИСТРАТИВНЫХ ПОМЕЩЕНИЙ И СООРУЖЕНИЙ (наличие)",
                    "НАЛИЧИЕ И СОСТОЯНИЕ  САНИТАРНО-БЫТОВЫХ, ПРОИЗВОДСТВЕННЫХ И АДМИНИСТРАТИВНЫХ ПОМЕЩЕНИЙ И СООРУЖЕНИЙ (оценка)",
                    "ЧИСТОТА И ПОРЯДОК НА ТЕРРИТОРИИ СТРОИТЕЛЬНОГО ГОРОДКА \n(наличие)",
                    "ЧИСТОТА И ПОРЯДОК НА ТЕРРИТОРИИ СТРОИТЕЛЬНОГО ГОРОДКА\n (оценка)",
                    "СТРОИТЕЛЬНАЯ ГОТОВНОСТЬ (плановая дата начала)",
                    "СТРОИТЕЛЬНАЯ ГОТОВНОСТЬ (плановая дата завершения)",
                    "КОНСТРУКТИВ (плановая дата начала)",
                    "КОНСТРУКТИВ (плановая дата завершения)",
                    "КОЛ-ВО КОРПУСОВ (плановая дата начала)",
                    "КОЛ-ВО КОРПУСОВ (плановая дата завершения)",
                    "КОЛ-ВО ЭТАЖЕЙ (плановая дата начала)",
                    "КОЛ-ВО ЭТАЖЕЙ (плановая дата завершения)",
                    "СТЕНЫ И ПЕРЕГОРОДКИ (плановая дата начала)",
                    "СТЕНЫ И ПЕРЕГОРОДКИ (плановая дата завершения)",
                    "ФАСАД (плановая дата начала)",
                    "ФАСАД (плановая дата завершения)",
                    "УТЕПЛИТЕЛЬ (плановая дата начала)",
                    "УТЕПЛИТЕЛЬ (плановая дата завершения)",
                    "ФАСАДНАЯ СИСТЕМА (плановая дата начала)",
                    "ФАСАДНАЯ СИСТЕМА (плановая дата завершения)",
                    "ВНУТРЕННЯЯ ОТДЕЛКА (плановая дата начала)",
                    "ВНУТРЕННЯЯ ОТДЕЛКА (плановая дата завершения)",
                    "ЧЕРНОВАЯ ОТДЕЛКА (плановая дата начала)",
                    "ЧЕРНОВАЯ ОТДЕЛКА (плановая дата завершения)",
                    "ЧИСТОВАЯ ОТДЕЛКА (плановая дата начала)",
                    "ЧИСТОВАЯ ОТДЕЛКА (плановая дата завершения)",
                    "ВНУТРЕННИЕ СЕТИ (плановая дата начала)",
                    "ВНУТРЕННИЕ СЕТИ (плановая дата завершения)",
                    "ВОДОСНАБЖЕНИЕ И ОТОПЛЕНИЕ (ВЕРТИКАЛЬ) (плановая дата начала)",
                    "ВОДОСНАБЖЕНИЕ И ОТОПЛЕНИЕ (ВЕРТИКАЛЬ) (плановая дата завершения)",
                    "ВОДОСНАБЖЕНИЕ И ОТОПЛЕНИЕ ПОЭТАЖНО (ГОРИЗОНТ) (плановая дата начала)",
                    "ВОДОСНАБЖЕНИЕ И ОТОПЛЕНИЕ ПОЭТАЖНО (ГОРИЗОНТ) (плановая дата завершения)",
                    "ВЕНТИЛЯЦИЯ (плановая дата начала)",
                    "ВЕНТИЛЯЦИЯ (плановая дата завершения)",
                    "ЭЛЕКТРОСНАБЖЕНИЕ И СКС (плановая дата начала)",
                    "ЭЛЕКТРОСНАБЖЕНИЕ И СКС (плановая дата завершения)",
                    "НАРУЖНЫЕ СЕТИ (плановая дата начала)",
                    "НАРУЖНЫЕ СЕТИ (плановая дата завершения)",
                    "БЛАГОУСТРОЙСТВО (плановая дата начала)",
                    "БЛАГОУСТРОЙСТВО (плановая дата завершения)",
                    "ТВЕРДОЕ ПОКРЫТИЕ (плановая дата начала)",
                    "ТВЕРДОЕ ПОКРЫТИЕ (плановая дата завершения)",
                    "ОЗЕЛЕНЕНИЕ (плановая дата начала)",
                    "ОЗЕЛЕНЕНИЕ (плановая дата завершения)",
                    "МАФ (плановая дата начала)",
                    "МАФ (плановая дата завершения)",
                    "СТРОИТЕЛЬНАЯ ГОТОВНОСТЬ (план)",
                    "СТРОИТЕЛЬНАЯ ГОТОВНОСТЬ (факт)",
                    "КОНСТРУКТИВ (план)",
                    "КОНСТРУКТИВ (факт)",
                    "КОЛ-ВО КОРПУСОВ (план)",
                    "КОЛ-ВО КОРПУСОВ (факт)",
                    "КОЛ-ВО ЭТАЖЕЙ (план)",
                    "КОЛ-ВО ЭТАЖЕЙ (факт)",
                    "СТЕНЫ И ПЕРЕГОРОДКИ (план)",
                    "СТЕНЫ И ПЕРЕГОРОДКИ (факт)",
                    "ФАСАД (план)",
                    "ФАСАД (факт)",
                    "УТЕПЛИТЕЛЬ (план)",
                    "УТЕПЛИТЕЛЬ (факт)",
                    "ФАСАДНАЯ СИСТЕМА (план)",
                    "ФАСАДНАЯ СИСТЕМА (факт)",
                    "ВНУТРЕННЯЯ ОТДЕЛКА (план)",
                    "ВНУТРЕННЯЯ ОТДЕЛКА (факт)",
                    "ЧЕРНОВАЯ ОТДЕЛКА (план)",
                    "ЧЕРНОВАЯ ОТДЕЛКА (факт)",
                    "ЧИСТОВАЯ ОТДЕЛКА (план)",
                    "ЧИСТОВАЯ ОТДЕЛКА (факт)",
                    "ВНУТРЕННИЕ СЕТИ (план)",
                    "ВНУТРЕННИЕ СЕТИ (факт)",
                    "ВОДОСНАБЖЕНИЕ И ОТОПЛЕНИЕ (ВЕРТИКАЛЬ) (план)",
                    "ВОДОСНАБЖЕНИЕ И ОТОПЛЕНИЕ (ВЕРТИКАЛЬ) (факт)",
                    "ВОДОСНАБЖЕНИЕ И ОТОПЛЕНИЕ ПОЭТАЖНО (ГОРИЗОНТ) (план)",
                    "ВОДОСНАБЖЕНИЕ И ОТОПЛЕНИЕ ПОЭТАЖНО (ГОРИЗОНТ) (факт)",
                    "ВЕНТИЛЯЦИЯ (план)",
                    "ВЕНТИЛЯЦИЯ (факт)",
                    "ЭЛЕКТРОСНАБЖЕНИЕ И СКС (план)",
                    "ЭЛЕКТРОСНАБЖЕНИЕ И СКС (факт)",
                    "НАРУЖНЫЕ СЕТИ (план)",
                    "НАРУЖНЫЕ СЕТИ (факт)",
                    "БЛАГОУСТРОЙСТВО (план)",
                    "БЛАГОУСТРОЙСТВО (факт)",
                    "ТВЕРДОЕ ПОКРЫТИЕ (план)",
                    "ТВЕРДОЕ ПОКРЫТИЕ (факт)",
                    "ОЗЕЛЕНЕНИЕ (план)",
                    "ОЗЕЛЕНЕНИЕ (факт)",
                    "МАФ (план)",
                    "МАФ (факт)"
                ]

                # Преобразование объектов datetime и time в строки и удаление колонок со значением "не требуется"
                for record in data_dict:
                    new_record = {}
                    for key, value in record.items():
                        if pd.notna(value) and isinstance(value, (datetime, pd.Timestamp)):
                            value = value.strftime('%d.%m.%Y')
                        elif pd.notna(value) and isinstance(value, time):
                            value = value.strftime('%H:%M:%S')
                        elif pd.isna(value):  # Проверка на NaT или NaN
                            value = None
                        elif isinstance(value, str) and value.strip().lower() == "не требуется":
                            continue  # Пропустить добавление этого ключа в new_record
                        elif isinstance(value, str) and value.strip().lower() == "данных не будет":
                            continue
                        # Проверяем тип данных и заменяем на null, если не соответствует
                        elif key in column_types:
                            value = validate_data_type(value, column_types[key])

                        # Добавление "СТРЭТАП" к нужным ключам
                        if key.strip() in keys_to_modify:
                            new_record[f'СТРЭТАП {key.strip()}'] = value
                        else:
                            # Добавление "КОНТРТОЧКА" к нужным ключам и удаление оригинальных ключей
                            if sheet_name != "5 - ОИВ факт" and sheet_name != "6 - ОИВ КТ":
                                phrases = [
                                    "ППМ (708-ПП/ППТ) (факт)",
                                    "ГПЗУ (факт)",
                                    "Разработка и согласование ТЗ (факт)",
                                    "Разработка и согласование квартирографии (факт)",
                                    "Проведение конкрусных процедур и подписание договора (факт)",
                                    "Разработка и согласование АПР (факт)",
                                    "Разработка и согласование АГР (факт)",
                                    "Заключение СКП (факт)",
                                    "Договор ТП (факт)",
                                    "Получение заключения МГЭ (факт)",
                                    "Отселение домов в пятне застройки (факт)",
                                    "Вынос инженерных систем из пятна застройки (факт)",
                                    "Снос домов в пятне застройки (факт)",
                                    "Снос нежилых объектов в пятне застройки (факт)",
                                    "Получение разрешения на строительство (факт)",
                                    "Устройство подземной части (факт)",
                                    "Устройство надземной части (факт)",
                                    "Устройство инженерных систем (факт)",
                                    "Отделочные работы (факт)",
                                    "Благоустройство территории (факт)",
                                    "Получение ЗОС (факт)",
                                    "Получение РВ (факт)",
                                    "Постановка на кадастровый учет (факт)",
                                    "Передача под заселение (факт)",
                                ]
                                if any(phrase in key.strip() for phrase in phrases):
                                    new_record[f'КОНТРТОЧКА {key.strip()}'] = value
                                else:
                                    new_record[key] = value  # Добавляем ключ без изменений
                            else:
                                new_record[key] = value  # Добавляем ключ без изменений для листа "5 - ОИВ факт"

                        # Если значение равно "не требуется" или null, удаляем ключ
                        if "корректировка" in key.lower() and (value == "не требуется" or value is None):
                            del new_record[key]

                    # Замена старого словаря новым
                    record.clear()
                    record.update(new_record)

                # Удаление ключей, содержащих "КОНТРТОЧКА"
                for record in data_dict:
                    keys_to_remove = [key for key in record if "КОНТРТОЧКА" in key]
                    for key in keys_to_remove:
                        del record[key]

                # Формирование пути для JSON-файла
                json_file_path = os.path.join(file_directory, f'{sheet_name}.json')

                # Запись данных в JSON-файл
                with open(json_file_path, 'w', encoding='utf-8') as json_file:
                    json.dump(data_dict, json_file, ensure_ascii=False, indent=4)

                print(f'Лист "{sheet_name}" успешно конвертирован в файл "{json_file_path}".')

# Пример использования
convert_excel_to_json('E://Загрузки//Telegram Desktop//Текущая обработка//МФР_для_ДБ_2_объекта_24.03.25.xlsx')